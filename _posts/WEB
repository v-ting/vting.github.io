##跨域解决方案
#jsonp
原理是使用script标签进行数据请求不跨域，但是只能发起get请求，请求放在url上不安全。
#CROS
服务端进行配置，配置允许源、允许方法等
正式通信前经行预请求：浏览器先询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些HTTP动词和头信息字段。
只有得到肯定答复，浏览器才会发出正式的XMLHttpRequest请求，否则就报错。
#代理
原理是服务器之间发送请求不跨域
proxy代理：可以设置changeorigin：true来开启虚拟服务器代发送请求，设置target来将请求转发目标。

##SPA优化
减少入口文件体积:懒加载,路由组件分块打包
静态资源本地缓存
UI框架按需加载
组件重复打包:在webpack的配置文件中,修改CommonsChunkPlugin,将需要重复加载多次的文件抽离放进公共依赖文件
压缩图片:icon使用雪碧图,减少请求
使用SSR:组件或页面通过生成html后在发生到浏览器

##节流防抖
#节流
就是指连续触发事件但是在 n 秒中只执行一次函数。
实现原理：
定时器节流：
function throttle(func, wait) {
 let timeout;
 return function() {
   if (!timeout) {
     timeout = setTimeout(() => {
       timeout = null;
       func.apply(this);
     }, wait);
   }
 };
}
时间戳节流：
function throttle(func, wait) {
  let pre = 0;
  return function() {
    let now = Date.now();
    if (now - pre > wait) {
      func.apply(this);
      pre = now;
    }
  };
}
#防抖
就是指触发事件后在 n 秒内函数只能执行一次，如果在 n 秒内又触发了事件，则会重新计算函数执行时间。
实现原理：
function debounce(func, wait) {
  let timeout;
  return function() {
    if (timeout) clearTimeout(timeout);
    timeout = setTimeout(function() {
      func.apply(this);
    }, wait);
  };
}

##懒加载
图片的加载是依赖于src路径，我们可以设置一个暂存器，把图片路劲放到暂存器中，当我们需要这个图片加载显示时，再把路径赋值给src，这样就能实现按需加载，也就是懒加载。
通常使用html5中的data-属性作为暂存器，例如src的值默认是正在加载中的GIF，而真正的图片路径是保存在data-中。

##sessionStorage localStorage cookie
#都是保存在浏览器端、且同源的
cookie常在http请求时携带 储存小 在过期时间之内有效 所有同源窗口共享
sessiongStorage储存大 会话窗口关闭前有效 仅当前会话窗口有效(即使刷新 区别于js对象)
localStorage储存大 始终有效 所有同源窗口共享

##URL到页面加载完成
浏览器开启一个线程处理这个请求，在浏览器、系统缓存、host文件中查找是否有DNS缓存，若没有则在远程DNS服务器上域名解析获得相应的IP(递归查询)
浏览器通过IP向服务器发起tcp链接，建立tcp三次握手，发起http请求(基于tcp，不用担心数据传输问题)
服务器请求数据，将数据返回浏览器
浏览器拿到html文件就开始解析代码，遇到js/css/image等静态资源，就向服务器请求下载(keep-alive 建立一次请求多次)
html构建DOM树，CSS构建渲染树 然后生成html渲染树 重排重绘 绘制到屏幕上
服务器四次挥手关闭tcp连接

##get post
get一般用于信息获取，使用URL传递参数发送的信息数量有限制，请求可被缓存，数据类型只允许ASCII字符
post一般用于修改服务器上的资源，对数据长度没要求，请求不被缓存，数据类型没有限制

##七层模型
应用层、表示层、会话层、传输层、网络层、数据链路层、物理层

##强缓存 协商缓存
强缓存是浏览器缓存 返回码200 协商缓存是服务器缓存 返回码304
强缓存以前用expires来设置过期时间是一个绝对时间 后来改为cache-control来设置相对时间
先查看是否命中强缓存 来判断是否需要对服务器进行请求

##http https


##闭包
var name = "The Window";

　　var object = {
　　　　name : "My Object",

　　　　getNameFunc : function(){
　　　　　　return function(){
　　　　　　　　return this.name;
　　　　　　};

　　　　}

　　};

　　alert(object.getNameFunc()()); //The Window(getNameFunc()()的调用者为window)
  
  var name = "The Window";

　　var object = {
　　　　name : "My Object",

　　　　getNameFunc : function(){
　　　　　　var that = this;
　　　　　　return function(){
　　　　　　　　return that.name;
　　　　　　};

　　　　}

　　};

　　alert(object.getNameFunc()());//My Object(getNameFunc()的直接调用者为object 保存到that)
